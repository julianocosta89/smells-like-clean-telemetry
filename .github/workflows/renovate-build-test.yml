name: Test Container Builds on Renovate PRs

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

permissions:
  contents: read
  pull-requests: read

jobs:
  check-renovate:
    name: Check if PR is from Renovate
    runs-on: ubuntu-latest
    outputs:
      is-renovate: ${{ steps.check.outputs.is-renovate }}
    steps:
      - name: Check if PR is from Renovate
        id: check
        run: |
          if [[ "${{ github.actor }}" == "renovate[bot]" ]] || [[ "${{ github.event.pull_request.head.ref }}" == renovate/* ]]; then
            echo "is-renovate=true" >> $GITHUB_OUTPUT
          else
            echo "is-renovate=false" >> $GITHUB_OUTPUT
          fi

  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    needs: check-renovate
    if: needs.check-renovate.outputs.is-renovate == 'true'
    outputs:
      auto: ${{ steps.changes.outputs.auto }}
      manual: ${{ steps.changes.outputs.manual }}
      express-auto: ${{ steps.changes.outputs.express-auto }}
      instrumentation-lib: ${{ steps.changes.outputs.instrumentation-lib }}
      manual-python: ${{ steps.changes.outputs.manual-python }}
      otel-collector: ${{ steps.changes.outputs.otel-collector }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            auto:
              - 'auto/**'
            manual:
              - 'manual/**'
            express-auto:
              - 'express-auto/**'
            instrumentation-lib:
              - 'instrumentation-lib/**'
            manual-python:
              - 'manual-python/**'
            otel-collector:
              - 'otel-collector/**'

  test-auto-service:
    name: Test Auto Service Build
    runs-on: ubuntu-latest
    needs: [check-renovate, detect-changes]
    if: needs.check-renovate.outputs.is-renovate == 'true' && needs.detect-changes.outputs.auto == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Auto Service
        run: |
          docker compose --profile auto build
        env:
          OBSERVABILITY_BACKEND: jaeger
          OTEL_EXPORTER_OTLP_ENDPOINT: http://localhost:4318
          OTEL_SERVICE_NAME: music-service-auto-test
          OTEL_RESOURCE_ATTRIBUTES: service.version=test

  test-manual-service:
    name: Test Manual Service Build
    runs-on: ubuntu-latest
    needs: [check-renovate, detect-changes]
    if: needs.check-renovate.outputs.is-renovate == 'true' && needs.detect-changes.outputs.manual == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Manual Service
        run: |
          docker compose --profile manual build
        env:
          OBSERVABILITY_BACKEND: jaeger
          OTEL_EXPORTER_OTLP_ENDPOINT: http://localhost:4318
          OTEL_SERVICE_NAME: music-service-manual-test
          OTEL_RESOURCE_ATTRIBUTES: service.version=test

  test-express-auto-service:
    name: Test Express Auto Service Build
    runs-on: ubuntu-latest
    needs: [check-renovate, detect-changes]
    if: needs.check-renovate.outputs.is-renovate == 'true' && needs.detect-changes.outputs.express-auto == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Express Auto Service
        run: |
          docker compose --profile express-auto build
        env:
          OBSERVABILITY_BACKEND: jaeger
          OTEL_EXPORTER_OTLP_ENDPOINT: http://localhost:4318
          OTEL_SERVICE_NAME: music-service-express-auto-test
          OTEL_RESOURCE_ATTRIBUTES: service.version=test

  test-instrumentation-lib-service:
    name: Test Instrumentation Lib Service Build
    runs-on: ubuntu-latest
    needs: [check-renovate, detect-changes]
    if: needs.check-renovate.outputs.is-renovate == 'true' && needs.detect-changes.outputs.instrumentation-lib == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Instrumentation Lib Service
        run: |
          docker compose --profile instrumentation-lib build
        env:
          OBSERVABILITY_BACKEND: jaeger
          OTEL_EXPORTER_OTLP_ENDPOINT: http://localhost:4318
          OTEL_SERVICE_NAME: music-service-instrumentation-lib-test
          OTEL_RESOURCE_ATTRIBUTES: service.version=test

  test-manual-python-service:
    name: Test Manual Python Service Build
    runs-on: ubuntu-latest
    needs: [check-renovate, detect-changes]
    if: needs.check-renovate.outputs.is-renovate == 'true' && needs.detect-changes.outputs.manual-python == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Manual Python Service
        run: |
          docker compose --profile manual-python build
        env:
          OBSERVABILITY_BACKEND: jaeger
          OTEL_EXPORTER_OTLP_ENDPOINT: http://localhost:4318
          OTEL_SERVICE_NAME: music-service-manual-python-test
          OTEL_RESOURCE_ATTRIBUTES: service.version=test

  test-otel-collector:
    name: Test OpenTelemetry Collector Build
    runs-on: ubuntu-latest
    needs: [check-renovate, detect-changes]
    if: needs.check-renovate.outputs.is-renovate == 'true' && needs.detect-changes.outputs.otel-collector == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build OpenTelemetry Collector
        run: |
          docker compose --profile otel-collector build
        env:
          OBSERVABILITY_BACKEND: jaeger
          OTEL_EXPORTER_OTLP_ENDPOINT: http://localhost:4318
          OTEL_SERVICE_NAME: otel-collector-test
          OTEL_RESOURCE_ATTRIBUTES: service.version=test

  build-test-summary:
    name: Build Test Summary
    runs-on: ubuntu-latest
    needs: [check-renovate, detect-changes, test-auto-service, test-manual-service, test-express-auto-service, test-instrumentation-lib-service, test-manual-python-service, test-otel-collector]
    if: always() && needs.check-renovate.outputs.is-renovate == 'true'
    steps:
      - name: Summary
        run: |
          echo "## Renovate Build Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.detect-changes.outputs.auto }}" == "true" ]]; then
            if [[ "${{ needs.test-auto-service.result }}" == "success" ]]; then
              echo "| Auto Service | ✅ Build successful |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Auto Service | ❌ Build failed |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          if [[ "${{ needs.detect-changes.outputs.manual }}" == "true" ]]; then
            if [[ "${{ needs.test-manual-service.result }}" == "success" ]]; then
              echo "| Manual Service | ✅ Build successful |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Manual Service | ❌ Build failed |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          if [[ "${{ needs.detect-changes.outputs.express-auto }}" == "true" ]]; then
            if [[ "${{ needs.test-express-auto-service.result }}" == "success" ]]; then
              echo "| Express Auto Service | ✅ Build successful |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Express Auto Service | ❌ Build failed |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          if [[ "${{ needs.detect-changes.outputs.instrumentation-lib }}" == "true" ]]; then
            if [[ "${{ needs.test-instrumentation-lib-service.result }}" == "success" ]]; then
              echo "| Instrumentation Lib Service | ✅ Build successful |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Instrumentation Lib Service | ❌ Build failed |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          if [[ "${{ needs.detect-changes.outputs.manual-python }}" == "true" ]]; then
            if [[ "${{ needs.test-manual-python-service.result }}" == "success" ]]; then
              echo "| Manual Python Service | ✅ Build successful |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Manual Python Service | ❌ Build failed |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          if [[ "${{ needs.detect-changes.outputs.otel-collector }}" == "true" ]]; then
            if [[ "${{ needs.test-otel-collector.result }}" == "success" ]]; then
              echo "| OpenTelemetry Collector | ✅ Build successful |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| OpenTelemetry Collector | ❌ Build failed |" >> $GITHUB_STEP_SUMMARY
            fi
          fi