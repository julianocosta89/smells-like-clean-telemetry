name: Build Test Services

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
  workflow_dispatch:
    inputs:
      auto:
        description: 'Test auto service'
        required: false
        default: 'false'
      manual:
        description: 'Test manual service'
        required: false
        default: 'false'
      express-auto:
        description: 'Test express-auto service'
        required: false
        default: 'false'
      instrumentation-lib:
        description: 'Test instrumentation-lib service'
        required: false
        default: 'false'
      manual-python:
        description: 'Test manual-python service'
        required: false
        default: 'false'
      otel-collector:
        description: 'Test otel-collector service'
        required: false
        default: 'false'
      target-ref:
        description: 'Target ref for integration tests'
        required: false
        default: 'main'

permissions:
  contents: read
  pull-requests: read
  actions: write

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      auto: ${{ steps.changes.outputs.auto }}
      manual: ${{ steps.changes.outputs.manual }}
      express-auto: ${{ steps.changes.outputs.express-auto }}
      instrumentation-lib: ${{ steps.changes.outputs.instrumentation-lib }}
      manual-python: ${{ steps.changes.outputs.manual-python }}
      otel-collector: ${{ steps.changes.outputs.otel-collector }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36  # v3
        with:
          filters: |
            auto:
              - 'auto/**'
            manual:
              - 'manual/**'
            express-auto:
              - 'express-auto/**'
            instrumentation-lib:
              - 'instrumentation-lib/**'
            manual-python:
              - 'manual-python/**'
            otel-collector:
              - 'otel-collector/**'
  test-auto-service:
    name: Test Auto Service Build
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: (github.event_name == 'workflow_dispatch' && inputs.auto == 'true') || (github.event_name == 'pull_request' && needs.detect-changes.outputs.auto == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3

      - name: Build Auto Service
        run: |
          docker compose build songs-auto
        env:
          OBSERVABILITY_BACKEND: jaeger
          OTEL_EXPORTER_OTLP_ENDPOINT: http://localhost:4318
          OTEL_SERVICE_NAME: music-service-auto-test
          OTEL_RESOURCE_ATTRIBUTES: service.version=test

  test-manual-service:
    name: Test Manual Service Build
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: (github.event_name == 'workflow_dispatch' && inputs.manual == 'true') || (github.event_name == 'pull_request' && needs.detect-changes.outputs.manual == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3

      - name: Build Manual Service
        run: |
          docker compose build songs-manual
        env:
          OBSERVABILITY_BACKEND: jaeger
          OTEL_EXPORTER_OTLP_ENDPOINT: http://localhost:4318
          OTEL_SERVICE_NAME: music-service-manual-test
          OTEL_RESOURCE_ATTRIBUTES: service.version=test

  test-express-auto-service:
    name: Test Express Auto Service Build
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: (github.event_name == 'workflow_dispatch' && inputs.express-auto == 'true') || (github.event_name == 'pull_request' && needs.detect-changes.outputs.express-auto == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3

      - name: Build Express Auto Service
        run: |
          docker compose build express-auto
        env:
          OBSERVABILITY_BACKEND: jaeger
          OTEL_EXPORTER_OTLP_ENDPOINT: http://localhost:4318
          OTEL_SERVICE_NAME: music-service-express-auto-test
          OTEL_RESOURCE_ATTRIBUTES: service.version=test

  test-instrumentation-lib-service:
    name: Test Instrumentation Lib Service Build
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: (github.event_name == 'workflow_dispatch' && inputs.instrumentation-lib == 'true') || (github.event_name == 'pull_request' && needs.detect-changes.outputs.instrumentation-lib == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3

      - name: Build Instrumentation Lib Service
        run: |
          docker compose build songs-lib
        env:
          OBSERVABILITY_BACKEND: jaeger
          OTEL_EXPORTER_OTLP_ENDPOINT: http://localhost:4318
          OTEL_SERVICE_NAME: music-service-instrumentation-lib-test
          OTEL_RESOURCE_ATTRIBUTES: service.version=test

  test-manual-python-service:
    name: Test Manual Python Service Build
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: (github.event_name == 'workflow_dispatch' && inputs.manual-python == 'true') || (github.event_name == 'pull_request' && needs.detect-changes.outputs.manual-python == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3

      - name: Build Manual Python Service
        run: |
          docker compose build manual-python
        env:
          OBSERVABILITY_BACKEND: jaeger
          OTEL_EXPORTER_OTLP_ENDPOINT: http://localhost:4318
          OTEL_SERVICE_NAME: music-service-manual-python-test
          OTEL_RESOURCE_ATTRIBUTES: service.version=test

  build-otel-collector:
    name: Build and Cache OpenTelemetry Collector
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: always()
    outputs:
      artifact-name: ${{ steps.set-outputs.outputs.artifact-name }}
      cache-key: ${{ steps.cache-key.outputs.cache-key }}
      cache-hit: ${{ steps.set-outputs.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3

      - name: Generate cache key
        id: cache-key
        run: |
          # Create hash of collector definition files
          CACHE_KEY=$(find otel-collector -name "*.yaml" -o -name "Dockerfile" -type f -exec sha256sum {} + | sha256sum | cut -d' ' -f1)
          echo "cache-key=otel-collector-$CACHE_KEY" >> $GITHUB_OUTPUT

      - name: Check cache for collector image
        id: check-cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809  # v4
        with:
          path: otel-collector-image.tar
          key: ${{ steps.cache-key.outputs.cache-key }}
          lookup-only: true

      - name: Set outputs
        id: set-outputs
        run: |
          echo "cache-hit=${{ steps.check-cache.outputs.cache-hit }}" >> $GITHUB_OUTPUT
          echo "artifact-name=${{ steps.cache-key.outputs.cache-key }}" >> $GITHUB_OUTPUT

      - name: Build OpenTelemetry Collector
        if: steps.check-cache.outputs.cache-hit != 'true'
        run: |
          docker compose build otel-collector
          # Get the built image name using docker compose
          IMAGE_NAME=$(docker compose images -q otel-collector)
          if [ -z "$IMAGE_NAME" ]; then
            echo "Failed to get image ID from docker compose, trying alternative method"
            IMAGE_NAME=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep -E "otel-collector|smells-like-clean-telemetry.*otel-collector" | head -1)
          fi
          echo "Using image: $IMAGE_NAME"
          # Save image as tar
          docker save -o otel-collector-image.tar "$IMAGE_NAME"
        env:
          OBSERVABILITY_BACKEND: jaeger
          OTEL_EXPORTER_OTLP_ENDPOINT: http://localhost:4318
          OTEL_SERVICE_NAME: otel-collector-test
          OTEL_RESOURCE_ATTRIBUTES: service.version=test

      - name: Cache collector image
        if: steps.check-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@0400d5f644dc74513175e3cd8d07132dd4860809  # v4
        with:
          path: otel-collector-image.tar
          key: ${{ steps.cache-key.outputs.cache-key }}

      - name: Restore collector image from cache
        if: steps.check-cache.outputs.cache-hit == 'true'
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809  # v4
        with:
          path: otel-collector-image.tar
          key: ${{ steps.cache-key.outputs.cache-key }}

      - name: Upload collector image as artifact for current workflow
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: ${{ steps.cache-key.outputs.cache-key }}
          path: otel-collector-image.tar
          retention-days: 1

  test-otel-collector:
    name: Test OpenTelemetry Collector Build
    runs-on: ubuntu-latest
    needs: [detect-changes, build-otel-collector]
    if: (github.event_name == 'workflow_dispatch' && inputs.otel-collector == 'true') || (github.event_name == 'pull_request' && needs.detect-changes.outputs.otel-collector == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3

      - name: Download collector image artifact
        if: needs.build-otel-collector.outputs.cache-hit != 'true'
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0  # v5
        with:
          name: ${{ needs.build-otel-collector.outputs.artifact-name }}
          path: ./

      - name: Restore collector image from cache
        if: needs.build-otel-collector.outputs.cache-hit == 'true'
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809  # v4
        with:
          path: otel-collector-image.tar
          key: ${{ needs.build-otel-collector.outputs.cache-key }}

      - name: Load collector image
        run: |
          docker load -i otel-collector-image.tar
          echo "OpenTelemetry Collector image loaded"

  integration-test-auto:
    name: Integration Test Auto Service
    runs-on: ubuntu-latest
    needs: [detect-changes, test-auto-service, build-otel-collector]
    if: (github.event_name == 'workflow_dispatch' && inputs.auto == 'true') || (github.event_name == 'pull_request' && needs.detect-changes.outputs.auto == 'true' && needs.test-auto-service.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3

      - name: Download collector image artifact
        if: needs.build-otel-collector.outputs.cache-hit != 'true'
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0  # v5
        with:
          name: ${{ needs.build-otel-collector.outputs.artifact-name }}
          path: ./

      - name: Restore collector image from cache
        if: needs.build-otel-collector.outputs.cache-hit == 'true'
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809  # v4
        with:
          path: otel-collector-image.tar
          key: ${{ needs.build-otel-collector.outputs.cache-key }}

      - name: Load collector image
        run: |
          docker load -i otel-collector-image.tar

      - name: Run integration test
        run: |
          # Start services in background
          docker compose --profile auto up -d
          
          # Wait for services to be healthy
          echo "Waiting for services to start..."
          sleep 30

          # Check if services are running
          docker compose ps
          
          # Send test request
          echo "Sending test request..."
          curl -f http://localhost:8080/songs/Polly/Nirvana || exit 1
          
          # Wait a bit for trace to be processed
          sleep 10
          
          # Check Jaeger for traces
          echo "Checking for traces in Jaeger..."
          TRACES=$(curl -s "http://localhost:16686/api/traces?service=songs-auto&limit=1" | jq '.data | length')
          
          if [ "$TRACES" -gt 0 ]; then
            echo "✅ Traces found in Jaeger!"
          else
            echo "❌ No traces found in Jaeger"
            docker compose logs
            exit 1
          fi
        env:
          OBSERVABILITY_BACKEND: jaeger
          OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
          OTEL_SERVICE_NAME: songs-auto
          OTEL_RESOURCE_ATTRIBUTES: service.version=test

      - name: Cleanup
        if: always()
        run: docker compose --profile auto down -v

  integration-test-manual:
    name: Integration Test Manual Service
    runs-on: ubuntu-latest
    needs: [detect-changes, test-manual-service, build-otel-collector]
    if: (github.event_name == 'workflow_dispatch' && inputs.manual == 'true') || (github.event_name == 'pull_request' && needs.detect-changes.outputs.manual == 'true' && needs.test-manual-service.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3

      - name: Download collector image artifact
        if: needs.build-otel-collector.outputs.cache-hit != 'true'
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0  # v5
        with:
          name: ${{ needs.build-otel-collector.outputs.artifact-name }}
          path: ./

      - name: Restore collector image from cache
        if: needs.build-otel-collector.outputs.cache-hit == 'true'
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809  # v4
        with:
          path: otel-collector-image.tar
          key: ${{ needs.build-otel-collector.outputs.cache-key }}

      - name: Load collector image
        run: |
          docker load -i otel-collector-image.tar

      - name: Run integration test
        run: |
          # Start services in background
          docker compose --profile manual up -d
          
          # Wait for services to be healthy
          echo "Waiting for services to start..."
          sleep 30

          # Check if services are running
          docker compose ps
          
          # Send test request
          echo "Sending test request..."
          curl -f http://localhost:3000/songs/Polly/Nirvana || exit 1
          
          # Wait a bit for trace to be processed
          sleep 10
          
          # Check Jaeger for traces
          echo "Checking for traces in Jaeger..."
          TRACES=$(curl -s "http://localhost:16686/api/traces?service=songs-manual&limit=1" | jq '.data | length')
          
          if [ "$TRACES" -gt 0 ]; then
            echo "✅ Traces found in Jaeger!"
          else
            echo "❌ No traces found in Jaeger"
            docker compose logs
            exit 1
          fi
        env:
          OBSERVABILITY_BACKEND: jaeger
          OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
          OTEL_SERVICE_NAME: songs-manual
          OTEL_RESOURCE_ATTRIBUTES: service.version=test

      - name: Cleanup
        if: always()
        run: docker compose --profile manual down -v

  integration-test-express-auto:
    name: Integration Test Express Auto Service
    runs-on: ubuntu-latest
    needs: [detect-changes, test-express-auto-service, build-otel-collector]
    if: (github.event_name == 'workflow_dispatch' && inputs.express-auto == 'true') || (github.event_name == 'pull_request' && needs.detect-changes.outputs.express-auto == 'true' && needs.test-express-auto-service.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3

      - name: Download collector image artifact
        if: needs.build-otel-collector.outputs.cache-hit != 'true'
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0  # v5
        with:
          name: ${{ needs.build-otel-collector.outputs.artifact-name }}
          path: ./

      - name: Restore collector image from cache
        if: needs.build-otel-collector.outputs.cache-hit == 'true'
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809  # v4
        with:
          path: otel-collector-image.tar
          key: ${{ needs.build-otel-collector.outputs.cache-key }}

      - name: Load collector image
        run: |
          docker load -i otel-collector-image.tar

      - name: Run integration test
        run: |
          # Start services in background
          docker compose --profile express-auto up -d
          
          # Wait for services to be healthy
          echo "Waiting for services to start..."
          sleep 30

          # Check if services are running
          docker compose ps
          
          # Send test request
          echo "Sending test request..."
          curl -f http://localhost:3000/songs/Polly/Nirvana || exit 1
          
          # Wait a bit for trace to be processed
          sleep 10
          
          # Check Jaeger for traces
          echo "Checking for traces in Jaeger..."
          TRACES=$(curl -s "http://localhost:16686/api/traces?service=express-auto&limit=1" | jq '.data | length')
          
          if [ "$TRACES" -gt 0 ]; then
            echo "✅ Traces found in Jaeger!"
          else
            echo "❌ No traces found in Jaeger"
            docker compose logs
            exit 1
          fi
        env:
          OBSERVABILITY_BACKEND: jaeger
          OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
          OTEL_SERVICE_NAME: express-auto
          OTEL_RESOURCE_ATTRIBUTES: service.version=test

      - name: Cleanup
        if: always()
        run: docker compose --profile express-auto down -v

  integration-test-instrumentation-lib:
    name: Integration Test Instrumentation Lib Service
    runs-on: ubuntu-latest
    needs: [detect-changes, test-instrumentation-lib-service, build-otel-collector]
    if: (github.event_name == 'workflow_dispatch' && inputs.instrumentation-lib == 'true') || (github.event_name == 'pull_request' && needs.detect-changes.outputs.instrumentation-lib == 'true' && needs.test-instrumentation-lib-service.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3

      - name: Download collector image artifact
        if: needs.build-otel-collector.outputs.cache-hit != 'true'
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0  # v5
        with:
          name: ${{ needs.build-otel-collector.outputs.artifact-name }}
          path: ./

      - name: Restore collector image from cache
        if: needs.build-otel-collector.outputs.cache-hit == 'true'
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809  # v4
        with:
          path: otel-collector-image.tar
          key: ${{ needs.build-otel-collector.outputs.cache-key }}

      - name: Load collector image
        run: |
          docker load -i otel-collector-image.tar

      - name: Run integration test
        run: |
          # Start services in background
          docker compose --profile instrumentation-lib up -d
          
          # Wait for services to be healthy
          echo "Waiting for services to start..."
          sleep 30

          # Check if services are running
          docker compose ps
          
          # Send test request
          echo "Sending test request..."
          curl -f http://localhost:8081/songs/Polly/Nirvana || exit 1
          
          # Wait a bit for trace to be processed
          sleep 10
          
          # Check Jaeger for traces
          echo "Checking for traces in Jaeger..."
          TRACES=$(curl -s "http://localhost:16686/api/traces?service=songs-lib&limit=1" | jq '.data | length')
          
          if [ "$TRACES" -gt 0 ]; then
            echo "✅ Traces found in Jaeger!"
          else
            echo "❌ No traces found in Jaeger"
            docker compose logs
            exit 1
          fi
        env:
          OBSERVABILITY_BACKEND: jaeger
          OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
          OTEL_SERVICE_NAME: songs-lib
          OTEL_RESOURCE_ATTRIBUTES: service.version=test

      - name: Cleanup
        if: always()
        run: docker compose --profile instrumentation-lib down -v

  integration-test-manual-python:
    name: Integration Test Manual Python Service
    runs-on: ubuntu-latest
    needs: [detect-changes, test-manual-python-service, build-otel-collector]
    if: (github.event_name == 'workflow_dispatch' && inputs.manual-python == 'true') || (github.event_name == 'pull_request' && needs.detect-changes.outputs.manual-python == 'true' && needs.test-manual-python-service.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3

      - name: Download collector image artifact
        if: needs.build-otel-collector.outputs.cache-hit != 'true'
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0  # v5
        with:
          name: ${{ needs.build-otel-collector.outputs.artifact-name }}
          path: ./

      - name: Restore collector image from cache
        if: needs.build-otel-collector.outputs.cache-hit == 'true'
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809  # v4
        with:
          path: otel-collector-image.tar
          key: ${{ needs.build-otel-collector.outputs.cache-key }}

      - name: Load collector image
        run: |
          docker load -i otel-collector-image.tar

      - name: Run integration test
        run: |
          # Start services in background
          docker compose --profile manual-python up -d
          
          # Wait for services to be healthy
          echo "Waiting for services to start..."
          sleep 30

          # Check if services are running
          docker compose ps
          
          # Send test request
          echo "Sending test request..."
          curl -f http://localhost:5000/songs/Polly/Nirvana || exit 1
          
          # Wait a bit for trace to be processed
          sleep 10
          
          # Check Jaeger for traces
          echo "Checking for traces in Jaeger..."
          TRACES=$(curl -s "http://localhost:16686/api/traces?service=manual-python&limit=1" | jq '.data | length')
          
          if [ "$TRACES" -gt 0 ]; then
            echo "✅ Traces found in Jaeger!"
          else
            echo "❌ No traces found in Jaeger"
            docker compose logs
            exit 1
          fi
        env:
          OBSERVABILITY_BACKEND: jaeger
          OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
          OTEL_SERVICE_NAME: manual-python
          OTEL_RESOURCE_ATTRIBUTES: service.version=test

      - name: Cleanup
        if: always()
        run: docker compose --profile manual-python down -v
